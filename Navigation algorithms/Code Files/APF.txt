% Hybrid APF-VFH Path Planning without Obstacle Inflation

clear variables; close all; clc;

%% Video Setup
video_filename = 'APF_Implementation_Obstacle_Without_Inflation.avi';  % Name of the video file
video_obj = VideoWriter(video_filename);  % Create VideoWriter object for recording
video_obj.FrameRate = 30;  % Set frame rate for the video
open(video_obj);  % Open the video file for writing

%% 1. Initialize Parameters

% APF parameters
zeta_goal_seeking = 1.2;                  % Base attractive coefficient for goal-seeking
eta_repelling_base = 20.0;                % Base repulsive coefficient for dynamic adjustment
eta_goal_seeking = 0.1;                   % Weaker repulsive influence when far from obstacles
d_goal_star = 1.0;                        % Threshold distance for switching attractive potential
Qstar = 2.0;                              % Influence distance for repulsive field

% Robot parameters
robot_radius = 0.2;                       % Radius of the robot
error_theta_max = deg2rad(30);            % Maximum allowable orientation error
v_max = 1.0;                              % Maximum linear velocity
v_min = 0.5;                              % Minimum linear velocity for steady progress
Kp_omega = 3.0;                           % Proportional gain for angular speed
omega_max = 1.2 * pi;                     % Reduced maximum angular velocity for narrow areas

% Navigation parameters
position_accuracy = 0.2;                  % Convergence threshold to stop close to the goal
dT = 0.08;                                % Time step
t_max = 1000;                             % Maximum iterations

% Thresholds for obstacle avoidance behavior
safe_distance = Qstar + 0.7;              % Safe distance to avoid obstacles

% Goal convergence behavior parameters
close_to_goal_dist = 1.0;                 % Distance within which the robot is considered close to the goal
strong_attraction_boost = 20.0;           % Significant boost for attraction when close to the goal
reduced_repulsion_near_goal = 0.02;        % Reduction factor for repulsion near goal

%% 2. Input Obstacles

num_of_obstacles = getNumberOfObstacles(); % Prompt user to input number of obstacles

% Define obstacles based on user input
obstacles = cell(num_of_obstacles,1);
for i = 1:num_of_obstacles
    obstacles{i} = getObstacleCoordinates(i); % Get obstacle coordinates for each obstacle
end

%% 3. Visualization Setup

figure_handle = figure;
hold on;
plotObstacles(obstacles); % Plot obstacles
axis equal;
grid on;

%% 4. Select Start and Goal Points

[start_pos, theta, goal_pos] = selectStartAndGoal(obstacles); % Get user-defined start and goal positions

%% 5. Initialize Path Tracking

% Initialize position tracking variables
t = 1;
X = zeros(t_max,1);
Y = zeros(t_max,1);
X(t) = start_pos(1);
Y(t) = start_pos(2);

% Variables for dynamic repulsion and local VFH
prev_pos = start_pos;
stuck_counter = 0;
adaptive_zeta = zeta_goal_seeking; 
temp_attraction_boost = 1.0;  % Initial boost factor for attraction

%% 6. Main Navigation Loop with Strong Final Attraction Near Goal

while norm(goal_pos - start_pos) > position_accuracy && t <= t_max
    % Calculate distance to the goal
    goal_dist = norm(goal_pos - start_pos);

    % Apply very strong attraction and minimal repulsion when near the goal
    if goal_dist < close_to_goal_dist
        temp_attraction_boost = strong_attraction_boost; % Strong attraction boost near goal
        eta_repelling = eta_repelling_base * reduced_repulsion_near_goal; % Minimal repulsion
    else
        temp_attraction_boost = 1.0; % Normal attraction far from goal
        eta_repelling = eta_repelling_base;
    end
    
    % Dynamic repulsion adjustment based on obstacle proximity
    [min_dist, closest_obstacle] = getClosestObstacleDistance(start_pos, obstacles);
    eta_repelling = eta_repelling * (Qstar / max(min_dist, 0.1)); % Adjust repulsion based on proximity

    % Calculate Potential Fields for attraction and repulsion
    [U_att, U_rep] = calculatePotential(start_pos, goal_pos, obstacles, adaptive_zeta * temp_attraction_boost, eta_repelling, d_goal_star, Qstar);

    % Blending factor for obstacle avoidance and goal direction
    if min_dist > safe_distance || goal_dist < close_to_goal_dist
        % More emphasis on goal direction when close to the goal
        theta = atan2(goal_pos(2) - start_pos(2), goal_pos(1) - start_pos(1));
    else
        % Hybrid VFH adjustment for obstacles
        theta_vfh = atan2(-U_rep(2), -U_rep(1));
        theta = (theta + theta_vfh) / 2; % Blend goal and obstacle avoidance directions
    end

    % Control Law to compute velocity and orientation updates
    [v_ref, omega_ref, theta] = computeControl(U_att + U_rep, theta, error_theta_max, Kp_omega, v_max, omega_max, v_min);

    % Update robot position
    new_pos = start_pos + v_ref * [cos(theta); sin(theta)] * dT;

    % Boundary check to prevent robot from entering obstacles
    if pointInObstacles(new_pos, obstacles)
        % Apply a side-step if robot is inside obstacle
        theta = theta + pi / 2;
        new_pos = start_pos + 0.5 * [cos(theta); sin(theta)];
        stuck_counter = stuck_counter + 1;
    else
        stuck_counter = 0;
    end

    % Check for lack of progress (stuck detection)
    progress = norm(new_pos - prev_pos);
    if progress < position_accuracy * 0.05
        stuck_counter = stuck_counter + 1;
        if stuck_counter > 10
            % Final Push: Increase attraction momentarily if stuck near goal
            temp_attraction_boost = strong_attraction_boost * 2.0; % Final boost when stuck near goal
        end
    else
        stuck_counter = 0;
        prev_pos = new_pos;
    end

    % Update current position and plot the path
    X(t+1) = new_pos(1);
    Y(t+1) = new_pos(2);
    start_pos = new_pos;
    t = t + 1;

    % Real-time plot of robot path and orientations
    plot(X(1:t), Y(1:t), '-b', 'LineWidth', 1.5); % Traveled path
    plotReferenceOrientation(start_pos, U_att, 'g'); % Reference orientation
    plotActualOrientation(start_pos, theta, 'r');    % Actual orientation
    title('Robot Navigation using Standard Potential Field');
    drawnow;

    % Capture and record frame
    frame = getframe(figure_handle);
    writeVideo(video_obj, frame);
end

%% 7. Final Plot Adjustments

% Plot goal position and display legend
plot(goal_pos(1), goal_pos(2), 'ob', 'MarkerSize', 10, 'MarkerFaceColor', 'b');
hold off;

% Display final result
if norm(goal_pos - start_pos) <= position_accuracy
    disp('Goal reached successfully!');
     % Capture the current frame and write to the video file
    frame = getframe(figure_handle);
    writeVideo(video_obj, frame);
else
    disp('Maximum iterations reached. Goal may not have been reached.');
end

% Close the video file after reaching the goal
close(video_obj);

%% --- Function Definitions ---

function [U_att, U_rep] = calculatePotential(current_pos, goal_pos, obstacles, zeta, eta, d_goal_star, Qstar)
    % Calculate attractive and repulsive potential fields for navigation
    %
    % Parameters:
    %   current_pos - Current position of the robot [x, y]
    %   goal_pos - Goal position of the robot [x, y]
    %   obstacles - Cell array of obstacle coordinates
    %   zeta - Attractive potential scaling coefficient
    %   eta - Repulsive potential scaling coefficient
    %   d_goal_star - Distance threshold for switching attractive potential
    %   Qstar - Influence distance for repulsive field
    %
    % Returns:
    %   U_att - Attractive potential field vector
    %   U_rep - Repulsive potential field vector

    % Calculate attractive potential field based on distance to goal
    % Calculate distance to the goal
    goal_dist = norm(current_pos - goal_pos);
    
    % Increase attraction strength significantly when close to the goal
    if goal_dist <= 1.0  % Close to the goal (1.0 can be adjusted)
        zeta = zeta * 10;  % Increase attraction by a factor of 10 near the goal
    end

    % Calculate attractive potential field based on distance to goal
    if goal_dist <= d_goal_star
        U_att = zeta * (current_pos - goal_pos); % Quadratic potential when close to goal
    else
        U_att = zeta * d_goal_star * (current_pos - goal_pos) / goal_dist; % Conic potential when far from goal
    end

    % Initialize repulsive potential
    U_rep = [0; 0];
    % Calculate repulsive potential field based on obstacle distances
    for i = 1:length(obstacles)
        [min_dist, closest_point] = closestPointOnObstacle(current_pos, obstacles{i});

        if min_dist <= Qstar && min_dist > 0
            % Apply repulsion only if within influence distance
            repulsion_magnitude = eta * (1/Qstar - 1/min_dist) / (min_dist^2 + 0.1);
            direction = (current_pos - closest_point) / min_dist;
            U_rep = U_rep + repulsion_magnitude * direction;
        elseif min_dist == 0
            % Set arbitrary repulsion direction if robot is exactly on obstacle
            direction = [1; 0];
            U_rep = U_rep + eta * 50 * direction;
        end
    end
end
function [min_dist, closest_point] = getClosestObstacleDistance(point, obstacles)
    % Finds the closest obstacle and distance to a given point
    %
    % Parameters:
    %   point - Current point [x, y]
    %   obstacles - Cell array of obstacle coordinates
    %
    % Returns:
    %   min_dist - Minimum distance to the closest obstacle
    %   closest_point - Coordinates of the closest point on the closest obstacle

    min_dist = inf;
    closest_point = [0; 0];
    for i = 1:length(obstacles)
        [dist, cp] = closestPointOnObstacle(point, obstacles{i});
        if dist < min_dist
            min_dist = dist;
            closest_point = cp;
        end
    end
end

function [min_dist, closest_point] = closestPointOnObstacle(point, obstacle)
    % Calculates the closest point on a given obstacle to a specified point
    %
    % Parameters:
    %   point - Current point [x, y]
    %   obstacle - Obstacle coordinates as an Nx2 matrix
    %
    % Returns:
    %   min_dist - Minimum distance to the obstacle
    %   closest_point - Coordinates of the closest point on the obstacle

    min_dist = inf;
    closest_point = [0; 0];
    num_vertices = size(obstacle, 1);
    for j = 1:num_vertices
        v1 = obstacle(j, :)';
        v2 = obstacle(mod(j, num_vertices) + 1, :)';
        [closest, dist] = distancePointToSegment(point, v1, v2);
        if dist < min_dist
            min_dist = dist;
            closest_point = closest;
        end
    end
end

function [closest, dist] = distancePointToSegment(point, v1, v2)
    % Calculates the closest point on a line segment to a specified point
    %
    % Parameters:
    %   point - Current point [x, y]
    %   v1, v2 - Endpoints of the line segment [x, y]
    %
    % Returns:
    %   closest - Closest point on the segment to the specified point
    %   dist - Distance from the point to the closest point on the segment

    edge_vec = v2 - v1;
    robot_vec = point - v1;
    edge_length_sq = dot(edge_vec, edge_vec);
    if edge_length_sq == 0
        proj = 0;
    else
        proj = dot(robot_vec, edge_vec) / edge_length_sq;
    end
    proj = max(0, min(1, proj));
    closest = v1 + proj * edge_vec;
    dist = norm(point - closest);
end

function num = getNumberOfObstacles()
    % Prompts user to input the number of obstacles
    %
    % Returns:
    %   num - Number of obstacles as an integer (non-negative)

    while true
        num = input('Enter number of obstacles: ');
        if isnumeric(num) && num >= 0 && floor(num) == num
            break;
        else
            disp('Invalid input. Please enter a non-negative integer.');
        end
    end
end

function obstacle = getObstacleCoordinates(index)
    % Prompts user to input coordinates for an obstacle
    %
    % Parameters:
    %   index - Index of the obstacle (used for display)
    %
    % Returns:
    %   obstacle - Nx2 matrix of coordinates for the obstacle vertices

    prompt = sprintf('Enter coordinates for obstacle %d as a Nx2 matrix [x1, y1; x2, y2; ...]:\n', index);
    while true
        obstacle = input(prompt);
        if validateObstacle(obstacle)
            break;
        else
            disp('Invalid input. Please enter a valid Nx2 numeric matrix with N >= 3.');
        end
    end
end

function valid = validateObstacle(obstacle)
    % Validates that obstacle input is a numeric Nx2 matrix
    %
    % Parameters:
    %   obstacle - Matrix to validate
    %
    % Returns:
    %   valid - Boolean indicating if input is a valid Nx2 matrix

    valid = isnumeric(obstacle) && size(obstacle, 2) == 2 && size(obstacle, 1) >= 3;
end

function plotObstacles(obstacles)
    % Plots obstacles on a 2D plane
    %
    % Parameters:
    %   obstacles - Cell array of obstacle coordinates

    for i = 1:length(obstacles)
        fill(obstacles{i}(:,1), obstacles{i}(:,2), [0.8, 0.8, 0.8], 'EdgeColor', 'k'); 
    end
end

function [start_pos, theta, goal_pos] = selectStartAndGoal(obstacles)
    % Allows user to select start and goal points on the plot, ensuring they are outside obstacles
    %
    % Parameters:
    %   obstacles - Cell array of obstacle coordinates
    %
    % Returns:
    %   start_pos - Coordinates of the start position [x, y]
    %   theta - Initial orientation (set to 0)
    %   goal_pos - Coordinates of the goal position [x, y]

    while true
        disp('Please select the **start point** on the plot');
        [x, y] = ginput(1);
        if ~pointInObstacles([x, y], obstacles)
            start_pos = [x; y];
            theta = 0; 
            plot(x, y, 'og', 'MarkerSize', 10, 'MarkerFaceColor', 'g');
            break;
        else
            disp('Start point is inside an obstacle. Please select a different point.');
        end
    end

    while true
        disp('Please select the **goal point** on the plot');
        [x_goal, y_goal] = ginput(1);
        if ~pointInObstacles([x_goal, y_goal], obstacles)
            goal_pos = [x_goal; y_goal];
            plot(x_goal, y_goal, 'ob', 'MarkerSize', 10, 'MarkerFaceColor', 'b');
            break;
        else
            disp('Goal point is inside an obstacle. Please select a different point.');
        end
    end
end

function inside = pointInObstacles(point, obstacles)
    % Checks if a given point is inside any obstacle
    %
    % Parameters:
    %   point - Coordinates of the point to check [x, y]
    %   obstacles - Cell array of obstacle coordinates
    %
    % Returns:
    %   inside - Boolean indicating if the point is inside any obstacle

    inside = false;
    for i = 1:length(obstacles)
        if inpolygon(point(1), point(2), obstacles{i}(:,1), obstacles{i}(:,2))
            inside = true;
            return;
        end
    end
end

function [v_ref, omega_ref, theta_new] = computeControl(U, theta, error_theta_max, Kp_omega, v_max, omega_max, v_min)
    % Computes control signals for velocity and angular velocity based on potential field gradients
    %
    % Parameters:
    %   U - Combined potential field vector (attractive + repulsive)
    %   theta - Current orientation of the robot
    %   error_theta_max - Maximum allowable orientation error
    %   Kp_omega - Proportional gain for angular velocity
    %   v_max - Maximum linear velocity
    %   omega_max - Maximum angular velocity
    %   v_min - Minimum linear velocity
    %
    % Returns:
    %   v_ref - Reference linear velocity
    %   omega_ref - Reference angular velocity
    %   theta_new - Updated orientation of the robot

    if norm(U) == 0
        theta_ref = theta; % No direction change if gradient is zero
    else
        theta_ref = atan2(-U(2), -U(1));
    end
    error_theta = wrapToPi(theta_ref - theta);

    if abs(error_theta) <= error_theta_max
        alpha = (error_theta_max - abs(error_theta)) / error_theta_max;
        v_ref = min(alpha * norm(U), v_max);
    else
        v_ref = v_min; % Set a minimal velocity instead of zero
    end

    omega_ref = Kp_omega * error_theta;
    omega_ref = max(min(omega_ref, omega_max), -omega_max);
    theta_new = theta + omega_ref * 0.05; % Update orientation
    theta_new = wrapToPi(theta_new);
end

function plotReferenceOrientation(pos, U, color)
    % Plots the reference orientation vector at a given position
    %
    % Parameters:
    %   pos - Position at which to plot the reference orientation [x, y]
    %   U - Potential field vector
    %   color - Color for the plot line

    if norm(U) == 0
        return;
    end
    theta_ref = atan2(-U(2), -U(1));
    ref_dir = 0.2 * [cos(theta_ref); sin(theta_ref)];
    plot([pos(1), pos(1)+ref_dir(1)], [pos(2), pos(2)+ref_dir(2)], '-', 'Color', color, 'LineWidth', 1);
end

function plotActualOrientation(pos, theta, color)
    % Plots the actual orientation vector at a given position
    %
    % Parameters:
    %   pos - Position at which to plot the actual orientation [x, y]
    %   theta - Current orientation angle
    %   color - Color for the plot line

    actual_dir = 0.2 * [cos(theta); sin(theta)];
    plot([pos(1), pos(1)+actual_dir(1)], [pos(2), pos(2)+actual_dir(2)], '-', 'Color', color, 'LineWidth', 1);
end
