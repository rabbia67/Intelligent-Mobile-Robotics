function rrt_tricycle_path_planning()
    % Main function to perform RRT path planning and simulate a tricycle robot
    % with a trailer in a 2D environment. It includes:
    % 1. Environment setup with obstacles.
    % 2. RRT-based path planning.
    % 3. Simulation of tricycle robot with trailer along the planned path.
    clc;
    clear;
    close all;

    %% --- 1) ENVIRONMENT SETUP ---

    % Environment dimensions
    env_width = 54;
    env_height = 33;

    % Bounding rectangle [x, y, width, height]
    box_size = [-27, -16, env_width, env_height]; % [x, y, width, height]

    % Corner rectangles [x, y, width, height]
    corner_rectangles = [
        -27,   -16, 7, 3;    % Bottom-left
        18,  -16, 9, 4;      % Bottom-right
        -27,   13, 7, 4;     % Top-left
        18,  13, 9, 4;       % Top-right
    ];

    % L-shaped blocks (two rectangles each)
    L_shapes = [
        % L-shape in top-middle
        -13, 2, 12, 15;    % Horizontal part
        -13, 13, 23, 4;    % Vertical part

        % L-shape in right-middle
        19, -8, 8, 17;     % Vertical part
        7, 2, 20, 7;       % Horizontal part

        % L-shape in bottom-middle
        -13, -16, 24, 5;   % Horizontal part
        -1, -16, 12, 13;   % Vertical part

        % L-shape in left-middle
        -27, -7, 7, 16;    % Vertical part
        -27, -7, 18, 5;    % Horizontal part
    ];

    % Combine all rectangles for collision checks
    all_rectangles = [corner_rectangles; L_shapes];

    % Define robot and trailer dimensions
    robot_radius = 0.25;  % Adjust based on your robot's size

    % Inflate obstacles by robot_radius
    inflated_rectangles = inflateObstacles(all_rectangles, robot_radius);

    % Define start point
    start_pt = [-26, 11];

    %% --- 2) CREATE FIGURE AND DRAW ENVIRONMENT ---

    % Create a figure for both RRT and robot simulation
    figure;
    hold on; axis equal; grid on;
    xlim([box_size(1)-1, box_size(1)+box_size(3)+1]);
    ylim([box_size(2)-1, box_size(2)+box_size(4)+1]);
    title('RRT Path Planning with Tricycle Robot');
    xlabel('X'); ylabel('Y');

    % Draw environment background
    rectangle('Position', box_size, 'FaceColor', [0.5 0.5 0.5], 'EdgeColor', 'b');

    % Plot corner rectangles (blue)
    for i = 1:size(corner_rectangles, 1)
        rectangle('Position', corner_rectangles(i, :), 'FaceColor', [0.2 0.2 0.8], 'EdgeColor', 'b');
    end

    % Plot L-shaped blocks (blue)
    for i = 1:size(L_shapes, 1)
        rectangle('Position', L_shapes(i, :), 'FaceColor', [0.2 0.2 0.8], 'EdgeColor', 'b');
    end

    % Plot start point (green)
    plot(start_pt(1), start_pt(2), 'go', 'MarkerSize', 10, 'MarkerFaceColor', 'g');

    % Prompt user to select the goal point on the graph
    disp('Please select the goal point on the graph by clicking.');
    [goal_x, goal_y] = ginput(1);
    goal_pt = [goal_x, goal_y];

    % Check if the goal point is within bounds
    if goal_x < box_size(1) || goal_x > (box_size(1) + box_size(3)) || ...
       goal_y < box_size(2) || goal_y > (box_size(2) + box_size(4))
        error('Goal point is out of bounds. Please restart and select a valid point within the environment.');
    end

    % Plot the selected goal point (red)
    plot(goal_pt(1), goal_pt(2), 'ro', 'MarkerSize', 10, 'MarkerFaceColor', 'r');
    disp(['Goal point selected at: (', num2str(goal_x), ', ', num2str(goal_y), ')']);

     %% --- Video Setup ---
    video_filename = 'RRT_Path_Planning_Using_Tricycle_Robot.avi';  % Name of the video file
    video_obj = VideoWriter(video_filename);  % Create VideoWriter object for recording
    video_obj.FrameRate = 30;  % Set frame rate for the video
    open(video_obj);  % Open the video file for writing

    %% --- 3) RRT PARAMETERS AND FUNCTIONS ---
    max_nodes   = 30000;   % Maximum number of nodes
    step_size   = 0.3;     % Step size for tree expansion
    goal_radius = 0.5;     % Distance threshold to consider goal "reached"
    goal_bias   = 0.3;     % Probability of sampling the goal

    % Tree structure: 
    % - nodes (Nx2 matrix)
    % - edges (Mx2 matrix: [parent_index, child_index])
    tree.nodes = start_pt;
    tree.edges = [];

    % Collision check: point inside any inflated rectangle?
    isInCollision = @(pt) any( arrayfun(@(i) ...
        (pt(1) >= inflated_rectangles(i,1) && pt(1) <= inflated_rectangles(i,1) + inflated_rectangles(i,3)) && ...
        (pt(2) >= inflated_rectangles(i,2) && pt(2) <= inflated_rectangles(i,2) + inflated_rectangles(i,4)), ...
        1:size(inflated_rectangles,1)) );

    % Out of bounds?
    isOutOfBounds = @(pt) (pt(1) < box_size(1) || pt(1) > (box_size(1) + box_size(3)) || ...
                           pt(2) < box_size(2) || pt(2) > (box_size(2) + box_size(4)));

    %% --- 4) RRT SEARCH ---

    disp('Running RRT...');

    path_found = false;
    for i = 1:max_nodes
        % Sample random point in the space (with goal bias)
        if rand() < goal_bias
            rand_pt = goal_pt;
        else
            rand_pt = [box_size(1) + rand()*env_width, box_size(2) + rand()*env_height];
        end

        % Find nearest node
        diffs = tree.nodes - rand_pt;
        dists = sqrt(sum(diffs.^2, 2));
        [~, nearest_idx] = min(dists);

        nearest_node = tree.nodes(nearest_idx,:);

        % Step from nearest_node toward rand_pt
        dir_vec = rand_pt - nearest_node;
        dist_sample = norm(dir_vec);
        if dist_sample < 1e-12
            continue;
        end
        dir_vec = dir_vec / dist_sample;  % unit direction
        new_node = nearest_node + step_size * dir_vec;

        % Collision / bounds check for new_node
        if isOutOfBounds(new_node) || isInCollision(new_node)
            continue;
        end

        % Check collision along the edge from nearest_node to new_node
        if checkEdgeCollision(nearest_node, new_node, inflated_rectangles)
            continue;
        end

        % Add new node
        tree.nodes = [tree.nodes; new_node];
        new_idx    = size(tree.nodes,1);
        tree.edges = [tree.edges; nearest_idx, new_idx];

        % Plot the tree extension
        plot([nearest_node(1), new_node(1)], [nearest_node(2), new_node(2)], 'y');
        drawnow;

        % Capture the frame and write to the video
        frame = getframe(gcf);  % Capture current figure
        writeVideo(video_obj, frame);  % Write the frame to the video

        % Check if within goal_radius
        if norm(new_node - goal_pt) < goal_radius
            % Add actual goal as final node
            if ~checkEdgeCollision(new_node, goal_pt, inflated_rectangles) && ...
               ~isInCollision(goal_pt) && ~isOutOfBounds(goal_pt)
                tree.nodes = [tree.nodes; goal_pt];
                tree.edges = [tree.edges; new_idx, size(tree.nodes,1)];
                path_found = true;
                disp('Path found to goal!');
                break;
            end
        end
    end

    %% --- 5) PATH RECONSTRUCTION ---
    path = [];
    if ~path_found
        disp('Path to goal not found within max_nodes.');
    else
        % Reconstruct path from goal to start
        path = goal_pt;
        current_node = size(tree.nodes,1);  % index of the goal
        % Capture the frame and write to the video
        frame = getframe(gcf);  % Capture current figure
        writeVideo(video_obj, frame);  % Write the frame to the video
        while current_node > 1
            parent_idx = tree.edges(tree.edges(:,2) == current_node, 1);
            if isempty(parent_idx)
                disp('Error in path reconstruction');
                path = [];
                break;
            end
            path = [tree.nodes(parent_idx,:); path]; %#ok<AGROW>
            current_node = parent_idx;
        end
        % Plot final path by connecting path nodes
        plot(path(:,1), path(:,2), 'r-', 'LineWidth', 2);
    end

    %% --- 6) TRICYCLE WITH TRAILER SIMULATION ALONG THE PATH ---

    if isempty(path)
        disp('No path found. Simulation will not run.');
        close(video_obj);
        disp(['Video saved as ', video_filename]);
        return;
    end

    % Define tricycle and trailer parameters
    scale = 0.25;            % scale factor for shape
    L_tricycle = 4 * scale;  % Length of the tricycle
    L_trailer  = 5 * scale;  % Length of the trailer
    W_tricycle = 2 * scale;  % Width of the tricycle
    W_trailer  = 2 * scale;  % Width of the trailer

    % Define shapes
    tricycle_shape_local = [
         0,          -W_tricycle/2;
         0,           W_tricycle/2;
         L_tricycle,  0
    ];
    trailer_shape_local = [
        -L_trailer/2, -W_trailer/2;
        -L_trailer/2,  W_trailer/2;
         L_trailer/2,  W_trailer/2;
         L_trailer/2, -W_trailer/2
    ];

    rotate_points = @(points,theta) [cos(theta), -sin(theta); ...
                                     sin(theta),  cos(theta)] * points';

    % Simulation settings
    dt = 0.05;
    v_tricycle = 1;           % forward speed
    delta_max = pi/4;         % maximum steering angle
    k_p = 2;                  % heading control gain (increased for better responsiveness)

    % Initialize tricycle state
    x_tricycle = path(1,1);
    y_tricycle = path(1,2);
    theta_tricycle = 0;
    x_trailer    = x_tricycle - L_trailer * cos(theta_tricycle);
    y_trailer    = y_tricycle - L_trailer * sin(theta_tricycle);
    theta_trailer = theta_tricycle;

    path_idx = 2; % Start from the second waypoint

    % Initialize graphical objects
    tricycle_rot   = rotate_points(tricycle_shape_local, theta_tricycle)';
    tricycle_world = tricycle_rot + [x_tricycle, y_tricycle];
    tricycle_patch = patch('XData', tricycle_world(:,1), 'YData', tricycle_world(:,2), ...
                           'FaceColor', 'g', 'EdgeColor', 'k', 'LineWidth', 1.5);

    trailer_rot   = rotate_points(trailer_shape_local, theta_trailer)';
    trailer_world = trailer_rot + [x_trailer, y_trailer];
    trailer_patch = patch('XData', trailer_world(:,1), 'YData', trailer_world(:,2), ...
                          'FaceColor', 'r', 'EdgeColor', 'k', 'LineWidth', 1.5);

    % Front wheel indicator
    front_wheel_pos = [x_tricycle + L_tricycle * cos(theta_tricycle), ...
                       y_tricycle + L_tricycle * sin(theta_tricycle)];
    front_wheel = plot(front_wheel_pos(1), front_wheel_pos(2), ...
                       'ko','MarkerSize',5,'MarkerFaceColor','w');

    % Linkage line between tricycle and trailer
    linkage = plot([x_tricycle, x_trailer], [y_tricycle, y_trailer], 'k--');

    % Initialize goal_reached flag for simulation
    goal_reached_simulation = false;

    % Simulation loop with Pure Pursuit
    while ~goal_reached_simulation
        if path_idx > size(path,1)
            disp('Reached final waypoint. Simulation finished.');
            frame = getframe(gcf);  % Capture final frame
            writeVideo(video_obj, frame);  % Write the final frame to the video
            goal_reached_simulation = true;
            break;
        end

        % Current target point
        current_goal = path(path_idx, :);

        % Compute steering angle to the current goal
        desired_theta = atan2(current_goal(2) - y_tricycle, current_goal(1) - x_tricycle);
        heading_error = desired_theta - theta_tricycle;
        heading_error = atan2(sin(heading_error), cos(heading_error)); % wrap to [-pi, pi]

        % Steering control (P-controller)
        delta = k_p * heading_error;
        delta = max(-delta_max, min(delta, delta_max));

        % Update tricycle state
        x_tricycle = x_tricycle + v_tricycle * cos(theta_tricycle) * dt;
        y_tricycle = y_tricycle + v_tricycle * sin(theta_tricycle) * dt;
        theta_tricycle = theta_tricycle + (v_tricycle / L_tricycle) * tan(delta) * dt;
        theta_tricycle = atan2(sin(theta_tricycle), cos(theta_tricycle)); % Normalize

        % Update trailer state based on tricycle's movement
        theta_trailer_dot = (v_tricycle / L_trailer) * sin(theta_tricycle - theta_trailer);
        theta_trailer = theta_trailer + theta_trailer_dot * dt;
        theta_trailer = atan2(sin(theta_trailer), cos(theta_trailer)); % Normalize
        x_trailer = x_tricycle - L_trailer * cos(theta_trailer);
        y_trailer = y_tricycle - L_trailer * sin(theta_trailer);

        % Check if reached the current goal
        distance_to_goal = norm([x_tricycle, y_tricycle] - current_goal);
        if distance_to_goal < 0.9
            path_idx = path_idx + 1;
            continue;
        end

        % Update tricycle graphical object
        tricycle_rot   = rotate_points(tricycle_shape_local, theta_tricycle)';
        tricycle_world = tricycle_rot + [x_tricycle, y_tricycle];
        set(tricycle_patch, 'XData', tricycle_world(:,1), 'YData', tricycle_world(:,2));

        % Update trailer graphical object
        trailer_rot   = rotate_points(trailer_shape_local, theta_trailer)';
        trailer_world = trailer_rot + [x_trailer, y_trailer];
        set(trailer_patch, 'XData', trailer_world(:,1), 'YData', trailer_world(:,2));

        % Update front wheel position
        set(front_wheel, 'XData', x_tricycle + L_tricycle * cos(theta_tricycle), ...
                         'YData', y_tricycle + L_tricycle * sin(theta_tricycle));

        % Update linkage line
        set(linkage, 'XData', [x_tricycle, x_trailer], ...
                     'YData', [y_tricycle, y_trailer]);

        % Check if tricycle has reached the goal point
        if norm([x_tricycle, y_tricycle] - goal_pt) < 0.3
            goal_reached_simulation = true;
            disp('Tricycle has reached the goal point.');
            frame = getframe(gcf);  % Capture frame when goal is reached
            writeVideo(video_obj, frame);  % Write the frame to the video
            break;
        end

        % Capture the current frame for video
        frame = getframe(gcf);  % Capture current figure
        writeVideo(video_obj, frame);  % Write the frame to the video

        drawnow;
        pause(dt); % Pause for animation
    end

    disp('Done.');
    %% Close the video file
    close(video_obj);
    disp(['Video saved as ', video_filename]);
end

%% --- Helper Functions ---
function inflated_rectangles = inflateObstacles(all_rectangles, robot_radius)
    % Function to inflate obstacles by robot_radius
    inflated_rectangles = all_rectangles;
    inflated_rectangles(:,1) = inflated_rectangles(:,1) - robot_radius;
    inflated_rectangles(:,2) = inflated_rectangles(:,2) - robot_radius;
    inflated_rectangles(:,3) = inflated_rectangles(:,3) + 2*robot_radius;
    inflated_rectangles(:,4) = inflated_rectangles(:,4) + 2*robot_radius;
end

function collision = checkEdgeCollision(p1, p2, obstacles)
    % Function to check if the line segment between p1 and p2
    % intersects any of the given rectangular obstacles.
    collision = false;
    for i = 1:size(obstacles, 1)
        % Define obstacle edges
        obs_x = obstacles(i,1);
        obs_y = obstacles(i,2);
        obs_w = obstacles(i,3);
        obs_h = obstacles(i,4);

        % Define the four corners of the rectangle
        corners = [
            obs_x, obs_y;
            obs_x + obs_w, obs_y;
            obs_x + obs_w, obs_y + obs_h;
            obs_x, obs_y + obs_h;
            obs_x, obs_y
        ];

        % Check intersection with each side
        for j = 1:4
            q1 = corners(j, :);
            q2 = corners(j+1, :);
            if doLineSegmentsIntersect(p1, p2, q1, q2)
                collision = true;
                return;
            end
        end
    end
end

function intersects = doLineSegmentsIntersect(p1, p2, q1, q2)
    % Helper function to determine if two line segments (p1-p2 and q1-q2) intersect
    % Returns true if they intersect, false otherwise

    % Compute the direction vectors
    d1 = p2 - p1;
    d2 = q2 - q1;
    denominator = d1(1)*d2(2) - d1(2)*d2(1);

    if denominator == 0
        intersects = false; % Parallel lines
        return;
    end

    t = ((q1(1) - p1(1)) * d2(2) - (q1(2) - p1(2)) * d2(1)) / denominator;
    u = ((q1(1) - p1(1)) * d1(2) - (q1(2) - p1(2)) * d1(1)) / denominator;

    intersects = (t >= 0 && t <= 1 && u >= 0 && u <= 1);
end
